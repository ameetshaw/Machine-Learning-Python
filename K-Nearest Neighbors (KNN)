
# coding: utf-8

# In[20]:


#Author : Amit Kumar Shaw
#E-mail : amitshaw1123@gmail.com
#The algorithm is used for detecting the classes in iris dataset


# ## Import the Libraries and Dataset

# In[1]:


import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from sklearn import datasets
from sklearn.decomposition import PCA
import numpy as np  
import pandas as pd  


# In[2]:


url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"

# Assign colum names to the dataset
names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'Class']

# Read dataset to pandas dataframe
dataset = pd.read_csv(url, names=names)  


# In[3]:


dataset.head()  


# ## Train-Test Split

# In[4]:


X = dataset.iloc[:, :-1].values  # removing the target variable (Class) independent feature
y = dataset.iloc[:, 4].values # dependent features 


# In[5]:


y


# In[6]:


X


# In[7]:


from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)  


# In[8]:


y_test


# ## Pre-Processing and Standardization

# In[9]:


from sklearn.preprocessing import StandardScaler  # Scalling 
scaler = StandardScaler()  
scaler.fit(X_train)

X_train = scaler.transform(X_train)  
X_test = scaler.transform(X_test)  


# In[10]:


X_test


# ## K-Nearest Neighbours Classifier

# In[11]:


from sklearn.neighbors import KNeighborsClassifier 

classifier = KNeighborsClassifier(n_neighbors=5)  
classifier.fit(X_train, y_train)  


# ## Predictions & Evaluations

# In[12]:


y_pred = classifier.predict(X_test)  


# In[13]:


y_pred


# In[13]:


from sklearn.metrics import classification_report, confusion_matrix  
print(confusion_matrix(y_test, y_pred))  
print(classification_report(y_test, y_pred))  


# ## Detection of Optimal Value for K Neighnours

# In[21]:


error = []

# Calculating error for K values between 1 and 40
for i in range(1, 40):  
    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(X_train, y_train)
    pred_i = knn.predict(X_test)
    error.append(np.mean(pred_i != y_test))


# In[20]:


plt.figure(figsize=(12, 6))  
plt.plot(range(1, 40), error, color='red', linestyle='dashed', marker='o',  
         markerfacecolor='blue', markersize=10)
plt.title('Error Rate K Value')  
plt.xlabel('K Value')  
plt.ylabel('Mean Error')  
plt.show()

